{"version":3,"sources":["backend/priceFunctions.js","frontend/Converter.js","reportWebVitals.js","index.js"],"names":["CoinGeckoClient","require","satsPerBtc","fetchBtcPrice","a","simple","price","ids","vs_currencies","data","btcusd","bitcoin","usd","btcPrice","satsPerUsd","Math","round","satsOutput","sats","usdOutput","Converter","React","useState","setSats","setUsd","sats1","setSats1","usd1","setUsd1","useEffect","convertSatsToUsd","then","y","convertUsdToSats","className","gutter","span","title","hoverable","size","placeholder","type","onChange","e","target","value","suffix","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAIMA,EAAkB,IAHNC,EAAQ,KAIpBC,EAAa,IAGfC,EAAa,uCAAG,8BAAAC,EAAA,sEAEFJ,EAAgBK,OAAOC,MAAM,CAC7CC,IAAK,CAAC,WACNC,cAAe,CAAC,SAJE,cAEfC,EAFe,OAOfC,EAASD,EAAKA,KAAKE,QAAQC,IAPZ,kBAQXF,GARW,2CAAH,qD,4CAWjB,WAAgCE,GAAhC,mBAAAR,EAAA,sEACwBD,IADxB,cACOU,EADP,OAEOC,EAAaC,KAAKC,MAAMd,EAAWW,GACnCI,EAAaL,EAAME,EAH1B,kBAIQG,GAJR,4C,kEASA,WAAgCC,GAAhC,iBAAAd,EAAA,sEACwBD,IADxB,cACOU,EADP,OAGOM,EAAaD,GADDL,EAASX,GAF5B,kBAIQiB,GAJR,4C,iCC6BiBC,EAlDC,WAAO,IAAD,EACCC,IAAMC,WADP,mBAChBJ,EADgB,KACVK,EADU,OAEDF,IAAMC,WAFL,mBAEhBV,EAFgB,KAEXY,EAFW,OAIGH,IAAMC,WAJT,mBAIhBG,EAJgB,KAITC,EAJS,OAKCL,IAAMC,WALP,mBAKhBK,EALgB,KAKVC,EALU,KAqBvB,OAdAP,IAAMQ,WAAU,Y,4CACfC,CAAiBZ,GAChBa,MAAK,SAACC,GACNR,EAAOQ,QAEN,CAACd,IAEJG,IAAMQ,WAAU,Y,4CACfI,CAAiBN,GAChBI,MAAK,SAACC,GACNN,EAASM,QAER,CAACL,IAGH,sBAAKO,UAAU,YAAf,UACC,eAAC,IAAD,CAAKC,OAAQ,GAAb,UACC,cAAC,IAAD,CAAKC,KAAM,GAAX,SACC,eAAC,IAAD,CAAMF,UAAU,OAAOG,MAAM,cAAcC,WAAW,EAAMC,KAAK,QAAjE,UACC,cAAC,IAAD,CAAOL,UAAU,YAAYM,YAAY,WAAWC,KAAK,SAASC,SAAU,SAACC,GAAD,OAAOpB,EAAQoB,EAAEC,OAAOC,QAAQC,OAAO,SACnH,uBACA,uBACA,cAAC,IAAD,CAAOZ,UAAU,YAAYM,YAAY,aAAaK,MAAOjC,GAAO,EAAGkC,OAAO,aAKhF,eAAC,IAAD,CAAKV,KAAM,GAAX,UACC,eAAC,IAAD,CAAMF,UAAU,OAAOG,MAAM,cAAcC,WAAW,EAAMC,KAAK,QAAjE,UACC,cAAC,IAAD,CAAOL,UAAU,YAAYM,YAAY,aAAaC,KAAK,SAASC,SAAU,SAACC,GAAD,OAAOf,EAAQe,EAAEC,OAAOC,QAAQC,OAAO,QACrH,uBACA,uBACA,cAAC,IAAD,CAAOZ,UAAU,YAAYM,YAAY,WAAWK,MAAOpB,GAAS,EAAGqB,OAAO,YAE/E,6BAGF,mBAAGZ,UAAU,YAAb,SAAyB,yEACzB,mBAAGA,UAAU,OAAb,SAAoB,mBAAGa,KAAK,qDAAR,+BCxCRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f6f47685.chunk.js","sourcesContent":["//1. Import coingecko-api\nconst CoinGecko = require('coingecko-api');\n \n//2. Initiate global variables\nconst CoinGeckoClient = new CoinGecko();\nconst satsPerBtc = 100000000; //100000000 sats in 1 bitcoin \n\n//3. Make calls\nvar fetchBtcPrice = async() => {\n\n\tlet data = await CoinGeckoClient.simple.price({\n\t\tids: ['bitcoin'],\n\t\tvs_currencies: ['usd'],\n\t});\n\n\tlet btcusd = data.data.bitcoin.usd;\n\treturn (btcusd);\n  };\n\nasync function convertUsdToSats(usd) {\n\tconst btcPrice = await fetchBtcPrice();\n\tconst satsPerUsd = Math.round(satsPerBtc/btcPrice); //number of sats per usd\n\tconst satsOutput = usd * satsPerUsd;\n\treturn satsOutput;\n};\n\n//console.log(convertUsdToSats(14000));\n\nasync function convertSatsToUsd(sats) {\n\tconst btcPrice = await fetchBtcPrice();\n\tconst usdPerSat = btcPrice/satsPerBtc;\n\tconst usdOutput =  sats * usdPerSat;\n\treturn usdOutput;\n};\n\n//console.log(convertSatsToUsd(1800));\n\nexport { convertSatsToUsd, convertUsdToSats }; \n\n//documentation: https://www.npmjs.com/package/coingecko-api","import \"./Converter.css\";\nimport React from 'react';\nimport { Card, Col, Row, Input } from 'antd';\nimport { convertSatsToUsd, convertUsdToSats } from '../backend/priceFunctions';\n\n//turn input value into a variable, plug that variable into the converting functions, make it happen onType\n\nconst Converter = () => {\n\tconst [sats, setSats] = React.useState();\n\tconst [usd, setUsd] = React.useState();\n\n\tconst [sats1, setSats1] = React.useState();\n\tconst [usd1, setUsd1] = React.useState();\n\n\tReact.useEffect(() => {\n\t\tconvertSatsToUsd(sats)\n\t\t.then((y) => {\n\t\t\tsetUsd(y);\n\t\t});\n\t}, [sats])\n\n\tReact.useEffect(() => {\n\t\tconvertUsdToSats(usd1)\n\t\t.then((y) => {\n\t\t\tsetSats1(y);\n\t\t});\n\t}, [usd1])\n\n\treturn (\n\t\t<div className=\"Converter\">\n\t\t\t<Row gutter={16}>\n\t\t\t\t<Col span={12}>\n\t\t\t\t\t<Card className=\"Card\" title=\"Sats to Usd\" hoverable={true} size='large'>\n\t\t\t\t\t\t<Input className=\"CardInput\" placeholder=\"Satoshis\" type=\"number\" onChange={(e) => setSats(e.target.value)} suffix=\"Sats\"/>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t<Input className=\"CardInput\" placeholder=\"US Dollars\" value={usd || 0} suffix=\"USD\"/>\n\t\t\t\t\t</Card>\n\t\t\t\t</Col>\n\n\t\t\t\t{/*USD to Sats*/}\n\t\t\t\t<Col span={12}>\n\t\t\t\t\t<Card className=\"Card\" title=\"Usd to Sats\" hoverable={true} size='large'>\n\t\t\t\t\t\t<Input className=\"CardInput\" placeholder=\"US Dollars\" type=\"number\" onChange={(e) => setUsd1(e.target.value)} suffix=\"USD\"/>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t<Input className=\"CardInput\" placeholder=\"Satoshis\" value={sats1 || 0} suffix=\"Sats\"/> \n\t\t\t\t\t</Card>\n\t\t\t\t\t<br></br>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<p className='Coingecko'><strong>Powered by CoinGecko ðŸ¦Ž</strong></p>\n\t\t\t<p className='Repo'><a href=\"https://github.com/thecallousedcoin/sats-converter\">Github Repo</a></p>\n\t\t</div>\n  \t);\n}\n  \n  export default Converter;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport Converter from './frontend/Converter';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Converter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}